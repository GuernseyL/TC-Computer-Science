package Q1.BIgLinkedList;

import Q1.Prog285b.Com;

import java.io.IOException;
import java.util.Iterator;

public class BLL {
    public static void main(String[] args) throws IOException {

        BLLHelper list = new BLLHelper();
        for (int i = 0; i < 100; ++i) {
            list.addFront((int) (Math.random() * (101)));
            list.addLast((int) (Math.random() * (101)));
        }
        list.print();

        System.out.println("\n");

        System.out.print(list.getCount());

        System.out.println("\n");

        list.add((int) (Math.random() * (101)), (int) (Math.random() * (201-1)) +1);

        if (list.isEmpty()) { System.out.println("List is empty"); }
        else { System.out.println("List is not empty"); }

        list.print();

        System.out.println("\n");

        int num = (int) (Math.random() * (201-1)) +1;
        if (list.isThere(num)) { System.out.println(num + "is there"); }

        System.out.println("First : " + list.getFirst());

        System.out.println("\n");

        System.out.println("Last : " + list.getLast());

        System.out.println("\n");

        num = (int) (Math.random() * (101));

        System.out.println("Number at spot " + num + " is : " + list.getSpot(num));

        list.removeFirst();

        list.removeLast();

        System.out.println("\n");

        list.print();

        System.out.println("\n");

        System.out.print("Numbers less than 10 : " + list.countLess10());

        System.out.println("\n");

        list.removeSpot((int) (Math.random() * (101)));

        num = (int) (Math.random() * (201-1)) +1;

        if (list.checkForNum(num)) { System.out.println("List does contain : " + num); }
        else { System.out.println("List does not contain : " + num); }

        num = (int) (Math.random() * (101));

        System.out.println(list.getNum(num));

        System.out.println("\n");

        list.getReverse().print();

        System.out.println("\n");

        Iterator<Integer> things = list.iterator();
        while (things.hasNext()) {
            Integer cool = things.next();
            System.out.println(cool);
        }

        System.out.println("\n");

        System.out.println("Average of all numbers in list : " + list.avg());

        System.out.println("\n");

        System.out.println("Smallest number in list : " + list.getMin());

        System.out.println("\n");

        System.out.println("Largest number in list : " + list.getMax());

        System.out.println("\n");

        System.out.println("Slot of first Largest number in list : " + list.findSlotMaxFirst());

        System.out.println("\n");

        System.out.println("Slot of last Largest number in list : " + list.findSlotMaxLast());

        System.out.println("\n");

        list = list.sort();

        list.print();

        System.out.println("\n");

        System.out.println("Number of 58's deleted : " + list.lose58());

        list.print();

        System.out.println("\n");

        System.out.println("Number of even numbers in list : " + list.getEvenCount());

        System.out.println("\n");

        list.killOdds();

        list.print();

        System.out.println("\n");

        list.clear();

        System.out.println("List has been cleared");

        System.out.println("\n");

        list.addFront((int) (Math.random() * (101)));

        list.print();
    }
}

/*
C:\Users\guernsey.l\.jdks\openjdk-24.0.2+12-54\bin\java.exe "-javaagent:C:\Users\guernsey.l\AppData\Local\Programs\IntelliJ IDEA 2025.2.1\lib\idea_rt.jar=58599" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath "C:\Users\guernsey.l\IdeaProjects\AP 2 Computer Science\out\production\AP 2 Computer Science" Q1.BIgLinkedList.BLL
92
84
78
39
7
67
49
79
4
79
82
86
18
88
84
64
96
59
31
65
64
52
80
97
92
98
48
24
40
5
28
75
67
25
64
25
17
65
64
36
24
13
84
67
14
54
67
70
55
40
22
70
32
84
15
62
23
76
56
81
92
31
33
39
47
46
41
28
25
78
70
34
94
23
65
1
79
35
91
57
73
90
46
85
72
32
100
90
48
25
71
12
59
100
60
77
41
75
93
79
3
10
10
69
82
5
74
19
30
83
36
72
28
3
24
75
38
21
37
45
75
9
73
1
87
64
18
72
37
41
98
54
34
1
51
12
38
4
72
57
71
54
50
42
81
93
85
65
50
6
62
60
49
68
16
26
70
53
23
18
93
84
90
97
68
3
32
25
29
84
72
44
55
99
84
73
40
45
65
6
69
81
30
28
80
100
35
38
69
84
95
61
74
92
36
16
39
73
13
29


200

List is not empty
92
84
78
39
7
67
49
79
4
79
82
86
18
88
84
64
96
59
31
65
64
52
80
97
92
98
48
24
40
5
28
75
67
25
64
25
17
65
64
36
24
13
84
67
14
54
67
70
55
40
22
70
32
84
15
62
23
76
56
81
92
31
33
39
47
46
41
28
25
78
70
34
94
23
65
1
79
35
91
57
73
90
46
85
72
32
60
90
48
25
71
12
59
100
60
77
41
75
93
79
3
10
10
69
82
5
74
19
30
83
36
72
28
3
24
75
38
21
37
45
75
9
73
1
87
64
18
72
37
41
98
54
34
1
51
12
38
4
72
57
71
54
50
42
81
93
85
65
50
6
62
60
49
68
16
26
70
53
23
18
93
84
90
97
68
3
32
25
29
84
72
44
55
99
84
73
40
45
65
6
69
81
30
28
80
100
35
38
69
84
95
61
74
92
36
16
39
73
13
29


32is there
First : 92


Last : 29


Number at spot 21 is : 52


84
78
39
7
67
49
79
4
79
82
86
18
88
84
64
96
59
31
65
64
52
80
97
92
98
48
24
40
5
28
75
67
25
64
25
17
65
64
36
24
13
84
67
14
54
67
70
55
40
22
70
32
84
15
62
23
76
56
81
92
31
33
39
47
46
41
28
25
78
70
34
94
23
65
1
79
35
91
57
73
90
46
85
72
32
60
90
48
25
71
12
59
100
60
77
41
75
93
79
3
10
10
69
82
5
74
19
30
83
36
72
28
3
24
75
38
21
37
45
75
9
73
1
87
64
18
72
37
41
98
54
34
1
51
12
38
4
72
57
71
54
50
42
81
93
85
65
50
6
62
60
49
68
16
26
70
53
23
18
93
84
90
97
68
3
32
25
29
84
72
44
55
99
84
73
40
45
65
6
69
81
30
28
80
100
35
38
69
84
95
61
74
92
36
16
39
73
13
29


Numbers less than 10 : 14

List does not contain : 144
67


29
13
73
39
16
36
92
74
61
95
84
69
38
35
100
80
28
30
81
69
6
65
45
40
73
84
99
55
44
72
84
29
25
32
3
68
97
90
84
93
18
23
53
70
26
16
68
49
60
62
6
50
65
85
93
81
42
50
54
71
57
72
4
38
12
51
1
34
54
98
41
37
72
18
64
87
1
73
9
75
45
37
21
38
75
24
3
28
72
36
83
30
19
74
5
82
69
10
10
3
79
93
75
41
77
60
100
59
12
25
48
90
60
32
72
85
46
90
73
57
91
35
79
1
65
23
94
34
70
78
25
28
41
46
47
39
33
31
92
81
56
76
23
62
15
84
32
70
22
40
55
70
67
54
14
67
84
13
24
36
64
65
17
25
64
25
67
75
28
5
40
24
48
98
92
97
80
52
64
65
31
59
96
64
84
88
18
86
82
79
4
79
49
67
7
39
78


84
78
39
7
67
49
79
4
79
82
86
18
88
84
64
96
59
31
65
64
52
80
97
92
98
48
24
40
5
28
75
67
25
64
25
17
65
64
36
24
13
84
67
14
54
67
70
55
40
22
70
32
84
15
62
23
76
56
81
92
31
33
39
47
46
41
28
25
78
70
34
94
23
65
1
79
35
91
57
73
90
46
85
72
32
60
90
48
25
12
59
100
60
77
41
75
93
79
3
10
10
69
82
5
74
19
30
83
36
72
28
3
24
75
38
21
37
45
75
9
73
1
87
64
18
72
37
41
98
54
34
1
51
12
38
4
72
57
71
54
50
42
81
93
85
65
50
6
62
60
49
68
16
26
70
53
23
18
93
84
90
97
68
3
32
25
29
84
72
44
55
99
84
73
40
45
65
6
69
81
30
28
80
100
35
38
69
84
95
61
74
92
36
16
39
73
13
29


Average of all numbers in list : 53.0


Smallest number in list : 1


Largest number in list : 100


Slot of first Largest number in list : 91


Slot of last Largest number in list : 132


1
1
1
3
3
3
4
4
5
5
6
6
7
9
10
10
12
12
13
13
14
15
16
16
17
18
18
18
19
21
22
23
23
23
24
24
24
25
25
25
25
25
26
28
28
28
28
29
29
30
30
31
31
32
32
32
33
34
34
35
35
36
36
36
37
37
38
38
38
39
39
39
40
40
40
41
41
41
42
44
45
45
46
46
47
48
48
49
49
50
50
51
52
53
54
54
54
55
55
56
57
57
59
59
60
60
60
61
62
62
64
64
64
64
64
65
65
65
65
65
67
67
67
67
68
68
69
69
69
70
70
70
70
71
72
72
72
72
72
73
73
73
73
74
74
75
75
75
75
76
77
78
78
79
79
79
79
80
80
81
81
81
82
82
83
84
84
84
84
84
84
84
84
85
85
86
87
88
90
90
90
91
92
92
92
93
93
93
94
95
96
97
97
98
98
99
100
100


Number of 58's deleted : 0
1
1
1
3
3
3
4
4
5
5
6
6
7
9
10
10
12
12
13
13
14
15
16
16
17
18
18
18
19
21
22
23
23
23
24
24
24
25
25
25
25
25
26
28
28
28
28
29
29
30
30
31
31
32
32
32
33
34
34
35
35
36
36
36
37
37
38
38
38
39
39
39
40
40
40
41
41
41
42
44
45
45
46
46
47
48
48
49
49
50
50
51
52
53
54
54
54
55
55
56
57
57
59
59
60
60
60
61
62
62
64
64
64
64
64
65
65
65
65
65
67
67
67
67
68
68
69
69
69
70
70
70
70
71
72
72
72
72
72
73
73
73
73
74
74
75
75
75
75
76
77
78
78
79
79
79
79
80
80
81
81
81
82
82
83
84
84
84
84
84
84
84
84
85
85
86
87
88
90
90
90
91
92
92
92
93
93
93
94
95
96
97
97
98
98
99
100
100


Number of even numbers in list : 104


1
4
4
6
6
10
10
12
12
14
16
16
18
18
18
22
24
24
24
26
28
28
28
28
30
30
32
32
32
34
34
36
36
36
38
38
38
40
40
40
42
44
46
46
48
48
50
50
52
54
54
54
56
60
60
60
62
62
64
64
64
64
64
68
68
70
70
70
70
72
72
72
72
72
74
74
76
78
78
80
80
82
82
84
84
84
84
84
84
84
84
86
88
90
90
90
92
92
92
94
96
98
98
100
100


List has been cleared


32

Process finished with exit code 0

 */
